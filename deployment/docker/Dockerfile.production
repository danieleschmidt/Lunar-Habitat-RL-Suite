# Production Dockerfile for Lunar Habitat RL Suite - NASA Mission Ready
# Multi-stage build for security and efficiency
# Compliant with NASA-STD-8739.8 Software Assurance Standard

# ===================================
# Stage 1: Security Base Image
# ===================================
FROM ubuntu:22.04 AS security-base

# Set security labels
LABEL maintainer="NASA Lunar Habitat RL Team"
LABEL version="1.0.0"
LABEL security_level="mission_critical"
LABEL compliance="NASA-STD-8739.8"
LABEL description="NASA Mission-Critical Lunar Habitat RL Production Container"

# Security: Run as non-root user
RUN groupadd -r lunarrl && useradd -r -g lunarrl -d /app -s /bin/bash lunarrl

# Security: Set timezone and locale
ENV TZ=UTC
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

# Security: Update base system and install only essential packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3.10-dev \
    python3-pip \
    python3-venv \
    gcc \
    g++ \
    make \
    cmake \
    pkg-config \
    libssl-dev \
    libffi-dev \
    libblas-dev \
    liblapack-dev \
    libhdf5-dev \
    ca-certificates \
    curl \
    wget \
    gnupg \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Security: Create secure directory structure
RUN mkdir -p /app/{src,data,logs,config,backup,tmp} \
    && chown -R lunarrl:lunarrl /app \
    && chmod 755 /app \
    && chmod 750 /app/{data,logs,config,backup,tmp}

# ===================================
# Stage 2: Python Dependencies
# ===================================
FROM security-base AS python-deps

# Switch to application user
USER lunarrl
WORKDIR /app

# Security: Create Python virtual environment
RUN python3.10 -m venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Security: Upgrade pip and install wheel
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements first for better layer caching
COPY --chown=lunarrl:lunarrl requirements.txt pyproject.toml ./

# Security: Install Python dependencies with hash verification
RUN pip install --no-cache-dir --require-hashes -r requirements.txt || \
    pip install --no-cache-dir -r requirements.txt

# Install additional production dependencies
RUN pip install --no-cache-dir \
    gunicorn==21.2.0 \
    uvloop==0.19.0 \
    prometheus-client==0.19.0 \
    psutil==5.9.6 \
    cryptography==41.0.7

# ===================================
# Stage 3: Application Build
# ===================================
FROM python-deps AS app-build

# Copy application source code
COPY --chown=lunarrl:lunarrl . /app/src/

# Security: Set proper permissions on source code
RUN find /app/src -type f -exec chmod 644 {} \; \
    && find /app/src -type d -exec chmod 755 {} \; \
    && find /app/src -name "*.py" -exec chmod 644 {} \;

# Install the application in development mode
WORKDIR /app/src
RUN pip install --no-cache-dir -e .

# ===================================
# Stage 4: Production Runtime
# ===================================
FROM python-deps AS production

# Copy application from build stage
COPY --from=app-build --chown=lunarrl:lunarrl /app/src /app/src
COPY --from=app-build --chown=lunarrl:lunarrl /app/venv /app/venv

# Security: Copy production configuration
COPY --chown=lunarrl:lunarrl deployment/docker/production-config.yml /app/config/
COPY --chown=lunarrl:lunarrl deployment/docker/entrypoint.sh /app/
RUN chmod +x /app/entrypoint.sh

# Security: Create health check script
RUN echo '#!/bin/bash\n\
python3 -c "import lunar_habitat_rl; env = lunar_habitat_rl.make_lunar_env(); env.reset(); print(\"Health check passed\")"' \
    > /app/healthcheck.sh && chmod +x /app/healthcheck.sh

# Security: Remove unnecessary files and clean up
RUN rm -rf /app/src/.git* /app/src/tests /app/src/docs \
    && find /app -name "*.pyc" -delete \
    && find /app -name "__pycache__" -type d -exec rm -rf {} + || true

# Security: Set file permissions
RUN chown -R lunarrl:lunarrl /app \
    && chmod -R go-rwx /app/config /app/data /app/logs

# ===================================
# Production Configuration
# ===================================

# Security: Drop privileges
USER lunarrl

# Set working directory
WORKDIR /app/src

# Environment variables for production
ENV PYTHONPATH=/app/src
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONHASHSEED=random
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Security: Environment variables
ENV LUNAR_RL_ENVIRONMENT=production
ENV LUNAR_RL_LOG_LEVEL=INFO
ENV LUNAR_RL_SECURITY_LEVEL=mission_critical
ENV LUNAR_RL_CONFIG_PATH=/app/config/production-config.yml

# Resource limits (can be overridden by orchestrator)
ENV MEMORY_LIMIT=2G
ENV CPU_LIMIT=2

# Expose application port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/healthcheck.sh

# Security: Mount points for persistent data
VOLUME ["/app/data", "/app/logs", "/app/backup"]

# Production entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command (can be overridden)
CMD ["python", "-m", "lunar_habitat_rl.cli", "server", "--host", "0.0.0.0", "--port", "8080"]

# ===================================
# Security Metadata
# ===================================
LABEL org.opencontainers.image.title="Lunar Habitat RL Suite"
LABEL org.opencontainers.image.description="NASA Mission-Critical Lunar Habitat Reinforcement Learning System"
LABEL org.opencontainers.image.version="3.0.0"
LABEL org.opencontainers.image.vendor="NASA Lunar Habitat Research Team"
LABEL org.opencontainers.image.licenses="NASA Open Source Agreement"
LABEL org.opencontainers.image.source="https://github.com/nasa/lunar-habitat-rl"
LABEL org.opencontainers.image.documentation="https://nasa.github.io/lunar-habitat-rl"

# Security scanning labels
LABEL security.scan.enabled="true"
LABEL security.cve.check="required"
LABEL security.compliance="NASA-STD-8739.8"
LABEL security.clearance="mission_critical"